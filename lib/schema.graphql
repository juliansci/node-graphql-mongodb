enum Level{
  beginner
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Professor

type Course {
  _id: ID!
  title: String!
  teacher: String 
  description: String!
  topic: String
  people: [Person]
  level: Level
}

interface Person{
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person{
    _id: ID!
  name: String!
  email: String!
  avatar: String @deprecated
}
type Professor implements Person {
    _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Get all courses"
  getCourses: [Course]
  "Get course"
  getCourse(id: ID!): Course
  "Get people"
  getPeople: [Person]
  "Get person"
  getPerson(id: ID!): Person
  "Global search"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}


input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Create course"
  createCourse(input: CourseInput!) : Course
  "Edit course"
  editCourse(_id: ID!, input: CourseEditInput!) : Course
  "Delete course"
  deleteCourse(_id: ID!) : String
  "Add people to course"
  addPeople(courseID: ID!, personID: ID!) : Course
  "Create person"
  createPerson(input: PersonInput!) : Person
  "Edit person"
  editPerson(_id: ID!, input: PersonEditInput!) : Person
  "Delete person"
  deletePerson(_id: ID!) : String
}